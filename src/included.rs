// Autogenerated by Thrift Compiler (0.14.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSetIdentifier, TStructIdentifier, TType, TObject};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

//
// AStruct
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AStruct {
  pub im_true: Option<bool>,
  pub im_false: Option<bool>,
  pub a_bite: Option<i8>,
  pub integer16: Option<i16>,
  pub integer32: Option<i32>,
  pub integer64: Option<i64>,
  pub double_precision: Option<OrderedFloat<f64>>,
  pub some_characters: Option<String>,
  pub zomg_unicode: Option<String>,
  pub what_who: Option<bool>,
}

impl AStruct {
  pub fn new<F1, F2, F3, F4, F5, F6, F7, F8, F9, F10>(im_true: F1, im_false: F2, a_bite: F3, integer16: F4, integer32: F5, integer64: F6, double_precision: F7, some_characters: F8, zomg_unicode: F9, what_who: F10) -> AStruct where F1: Into<Option<bool>>, F2: Into<Option<bool>>, F3: Into<Option<i8>>, F4: Into<Option<i16>>, F5: Into<Option<i32>>, F6: Into<Option<i64>>, F7: Into<Option<OrderedFloat<f64>>>, F8: Into<Option<String>>, F9: Into<Option<String>>, F10: Into<Option<bool>> {
    AStruct {
      im_true: im_true.into(),
      im_false: im_false.into(),
      a_bite: a_bite.into(),
      integer16: integer16.into(),
      integer32: integer32.into(),
      integer64: integer64.into(),
      double_precision: double_precision.into(),
      some_characters: some_characters.into(),
      zomg_unicode: zomg_unicode.into(),
      what_who: what_who.into(),
    }
  }
}

impl TObject for AStruct {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AStruct> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<bool> = Some(false);
    let mut f_2: Option<bool> = Some(false);
    let mut f_3: Option<i8> = Some(0);
    let mut f_4: Option<i16> = Some(0);
    let mut f_5: Option<i32> = Some(0);
    let mut f_6: Option<i64> = Some(0);
    let mut f_7: Option<OrderedFloat<f64>> = Some(OrderedFloat::from(0.0));
    let mut f_8: Option<String> = Some("".to_owned());
    let mut f_9: Option<String> = Some("".to_owned());
    let mut f_10: Option<bool> = Some(false);
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_bool()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_bool()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_i8()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_i16()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_i32()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_i64()?;
          f_6 = Some(val);
        },
        7 => {
          let val = OrderedFloat::from(i_prot.read_double()?);
          f_7 = Some(val);
        },
        8 => {
          let val = i_prot.read_string()?;
          f_8 = Some(val);
        },
        9 => {
          let val = i_prot.read_string()?;
          f_9 = Some(val);
        },
        10 => {
          let val = i_prot.read_bool()?;
          f_10 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = AStruct {
      im_true: f_1,
      im_false: f_2,
      a_bite: f_3,
      integer16: f_4,
      integer32: f_5,
      integer64: f_6,
      double_precision: f_7,
      some_characters: f_8,
      zomg_unicode: f_9,
      what_who: f_10,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("a_struct");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(fld_var) = self.im_true {
      o_prot.write_field_begin(&TFieldIdentifier::new("im_true", TType::Bool, 1))?;
      o_prot.write_bool(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.im_false {
      o_prot.write_field_begin(&TFieldIdentifier::new("im_false", TType::Bool, 2))?;
      o_prot.write_bool(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.a_bite {
      o_prot.write_field_begin(&TFieldIdentifier::new("a_bite", TType::I08, 3))?;
      o_prot.write_i8(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.integer16 {
      o_prot.write_field_begin(&TFieldIdentifier::new("integer16", TType::I16, 4))?;
      o_prot.write_i16(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.integer32 {
      o_prot.write_field_begin(&TFieldIdentifier::new("integer32", TType::I32, 5))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.integer64 {
      o_prot.write_field_begin(&TFieldIdentifier::new("integer64", TType::I64, 6))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.double_precision {
      o_prot.write_field_begin(&TFieldIdentifier::new("double_precision", TType::Double, 7))?;
      o_prot.write_double(fld_var.into())?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.some_characters {
      o_prot.write_field_begin(&TFieldIdentifier::new("some_characters", TType::String, 8))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.zomg_unicode {
      o_prot.write_field_begin(&TFieldIdentifier::new("zomg_unicode", TType::String, 9))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.what_who {
      o_prot.write_field_begin(&TFieldIdentifier::new("what_who", TType::Bool, 10))?;
      o_prot.write_bool(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

impl Default for AStruct {
  fn default() -> Self {
    AStruct{
      im_true: Some(false),
      im_false: Some(false),
      a_bite: Some(0),
      integer16: Some(0),
      integer32: Some(0),
      integer64: Some(0),
      double_precision: Some(OrderedFloat::from(0.0)),
      some_characters: Some("".to_owned()),
      zomg_unicode: Some("".to_owned()),
      what_who: Some(false),
    }
  }
}

pub const FOO: &str = "bar";

//
// AService service client
//

pub trait TAServiceSyncClient {
  fn a_procedure(&mut self, arg: i32) -> thrift::Result<i32>;
}

pub trait TAServiceSyncClientMarker {}

pub struct AServiceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> AServiceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> AServiceSyncClient<IP, OP> {
    AServiceSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for AServiceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> TAServiceSyncClientMarker for AServiceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + TAServiceSyncClientMarker> TAServiceSyncClient for C {
  fn a_procedure(&mut self, arg: i32) -> thrift::Result<i32> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("a_procedure", TMessageType::Call, self.sequence_number());
        let call_args = AServiceAProcedureArgs { arg };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("a_procedure", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = AServiceAProcedureResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// AService service processor
//

pub trait AServiceSyncHandler {
  fn handle_a_procedure(&self, arg: i32) -> thrift::Result<i32>;
}

pub struct AServiceSyncProcessor<H: AServiceSyncHandler> {
  handler: H,
}

impl <H: AServiceSyncHandler> AServiceSyncProcessor<H> {
  pub fn new(handler: H) -> AServiceSyncProcessor<H> {
    AServiceSyncProcessor {
      handler,
    }
  }
  fn process_a_procedure(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TAServiceProcessFunctions::process_a_procedure(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct TAServiceProcessFunctions;

impl TAServiceProcessFunctions {
  pub fn process_a_procedure<H: AServiceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = AServiceAProcedureArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_a_procedure(args.arg) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("a_procedure", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = AServiceAProcedureResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("a_procedure", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.description()
              )
            };
            let message_ident = TMessageIdentifier::new("a_procedure", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: AServiceSyncHandler> TProcessor for AServiceSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "a_procedure" => {
        self.process_a_procedure(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// AServiceAProcedureArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct AServiceAProcedureArgs {
  arg: i32,
}

impl AServiceAProcedureArgs {
}

impl TObject for AServiceAProcedureArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AServiceAProcedureArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i32> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i32()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("AServiceAProcedureArgs.arg", &f_1)?;
    let ret = AServiceAProcedureArgs {
      arg: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("a_procedure_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("arg", TType::I32, 1))?;
    o_prot.write_i32(self.arg)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AServiceAProcedureResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct AServiceAProcedureResult {
  result_value: Option<i32>,
}

impl AServiceAProcedureResult {
  fn ok_or(self) -> thrift::Result<i32> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for AServiceAProcedure"
          )
        )
      )
    }
  }
}

impl TObject for AServiceAProcedureResult {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AServiceAProcedureResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<i32> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = i_prot.read_i32()?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = AServiceAProcedureResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("AServiceAProcedureResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::I32, 0))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

